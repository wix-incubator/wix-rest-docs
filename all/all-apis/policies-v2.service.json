{
  "name": "Policies v2",
  "client_id": "https://github.com/wix-private/events/tree/master/events-services/events-policies#public",
  "memberOf": "All APIs",
  "category": "business-service",
  "mixes": [],
  "labels": [],
  "docs":   {
    "summary": "APIs for managing policies for events.",
    "description": []
  },
  "properties": [],
  "tags": [  {
    "name": "Policy",
    "entity": "_wix_events_v2_Policy",
    "src": "https://github.com/wix-private/events/tree/master/events-services/events-policies/wix/events/v2/policy.proto"
  }],
  "relatedGuides":   [
        {
      "path": "../guides/policies-v2/docs/intro.md",
      "name": "Introduction"
    },
        {
      "path": "../guides/policies-v2/docs/filter-and-sort.md",
      "name": "Filter and Sort"
    }
  ],
  "operations":   [
        {
      "name": "Create Policy",
      "methodName": "CreatePolicy",
      "serviceName": "PolicyManagement",
      "tag": "Policy",
      "permissions": [      {
        "name": "Manage Policies",
        "description": "Request permission to read, create and change events policies."
      }],
      "events": [],
      "labels": [],
      "nameParams": [],
      "requiredFields":       [
        "policy",
        "policy.name",
        "policy.body",
        "policy.eventId"
      ],
      "params": [      {
        "in": "BODY",
        "name": "policy",
        "type": "All APIs.Policies v2._wix_events_v2_Policy",
        "doc": " Policy info.\n",
        "required": true
      }],
      "ret":       {
        "type":         {
          "name": "CreatePolicy",
          "statusCode": "200",
          "typeParams": ["All APIs.Policies v2._wix_events_v2_CreatePolicyResponse"]
        },
        "doc": ""
      },
      "locations": [],
      "docs":       {
        "summary": " Creates a policy.         \n You can create up to 3 policies per event. If you try to create more than 3, you'll get the \"Maximum number of policies for the event has been reached\" error.\n \n",
        "description": [],
        "request": "POST",
        "url": "https://www.wixapis.com/events-policies/v2/policies",
        "links": [],
        "examples": [        {
          "title": "Create Policy",
          "body": ["curl -X POST 'https://www.wixapis.com/events-policies/v2/policies' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: <AUTH TOKEN>' \\\n--data-binary '{\n  \"policy\": {\n    \"name\": \"Terms and Conditions Event 1\",\n    \"body\": \"<p>Tickets to this Event are issued on behalf of the Organiser and are subject to the following terms and conditions.<\/p>\",\n    \"eventId\": \"9d720f99-1b5a-4141-9877-d32985391e18\"\n  }\n}'"],
          "response": ["{\"policy\": {\n  \"id\": \"eef70fb3-8567-4861-9f77-ebd2ad3682d5\",\n  \"revision\": \"1\",\n  \"createdDate\": \"2023-02-14T11:54:51.037Z\",\n  \"updatedDate\": \"2023-02-14T11:54:51.037Z\",\n  \"name\": \"Terms and Conditions Event 1\",\n  \"body\": \"<p>Tickets to this Event are issued on behalf of the Organiser and are subject to the following terms and conditions.<\\/p>\",\n  \"eventId\": \"9d720f99-1b5a-4141-9877-d32985391e18\"\n}} "],
          "type": "curl",
          "extra": {}
        }],
        "extra": {}
      },
      "extra":       {
        "hasRest": true,
        "rpcRequestName": "CreatePolicyRequest",
        "rpcResponseName": "CreatePolicyResponse"
      },
      "customLabels": []
    },
        {
      "name": "Delete Policy",
      "methodName": "DeletePolicy",
      "serviceName": "PolicyManagement",
      "tag": "Policy",
      "permissions": [      {
        "name": "Manage Policies",
        "description": "Request permission to read, create and change events policies."
      }],
      "events": [],
      "labels": [],
      "nameParams": [],
      "requiredFields":       [
        "policyId",
        "revision"
      ],
      "params":       [
                {
          "in": "PATH",
          "name": "policyId",
          "type": "string",
          "doc": " ID of the policy to delete.\n",
          "required": true
        },
                {
          "in": "BODY",
          "name": "revision",
          "type": "string",
          "doc": " Revision of the policy to delete.\n",
          "required": true
        }
      ],
      "ret":       {
        "type":         {
          "name": "DeletePolicy",
          "statusCode": "200",
          "typeParams": ["All APIs.Policies v2._wix_events_v2_DeletePolicyResponse"]
        },
        "doc": ""
      },
      "locations": [],
      "docs":       {
        "summary": " Permanently deletes a policy.\n \n",
        "description": [],
        "request": "DELETE",
        "url": "https://www.wixapis.com/events-policies/v2/policies/{policyId}",
        "links": [],
        "examples": [        {
          "title": "Delete Policy",
          "body": ["curl -X DELETE 'https://www.wixapis.com/events-policies/v2/policies/7243931d-74e4-4d6a-91f0-4835fa79161e' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: <AUTH TOKEN>' \\\n--data-binary '{\n  \"revision\": \"1\"\n}'"],
          "response": ["{} "],
          "type": "curl",
          "extra": {}
        }],
        "extra": {}
      },
      "extra":       {
        "hasRest": true,
        "rpcRequestName": "DeletePolicyRequest",
        "rpcResponseName": "DeletePolicyResponse"
      },
      "customLabels": []
    },
        {
      "name": "Get Policy",
      "methodName": "GetPolicy",
      "serviceName": "PolicyManagement",
      "tag": "Policy",
      "permissions": [      {
        "name": "Read Policies",
        "description": "Request permission to read basic events policy info."
      }],
      "events": [],
      "labels": [],
      "nameParams": [],
      "requiredFields": ["policyId"],
      "params": [      {
        "in": "PATH",
        "name": "policyId",
        "type": "string",
        "doc": " Policy ID.\n",
        "required": true
      }],
      "ret":       {
        "type":         {
          "name": "GetPolicy",
          "statusCode": "200",
          "typeParams": ["All APIs.Policies v2._wix_events_v2_GetPolicyResponse"]
        },
        "doc": ""
      },
      "locations": [],
      "docs":       {
        "summary": " Retrieves a policy.\n \n",
        "description": [],
        "request": "GET",
        "url": "https://www.wixapis.com/events-policies/v2/policies/{policyId}",
        "links": [],
        "examples": [        {
          "title": "Get Policy",
          "body": ["curl -X GET 'https://www.wixapis.com/events-policies/v2/policies?7243931d-74e4-4d6a-91f0-4835fa79161e' \\\n-H 'Authorization: <AUTH TOKEN>'"],
          "response": ["{\"policy\": {\n  \"id\": \"7243931d-74e4-4d6a-91f0-4835fa79161e\",\n  \"revision\": \"1\",\n  \"createdDate\": \"2023-02-14T11:54:08.379Z\",\n  \"updatedDate\": \"2023-02-14T11:54:08.379Z\",\n  \"name\": \"Terms and Conditions Event 2\",\n  \"body\": \"Nobody will be allowed admission to the Event without a valid ticket or pass.\",\n  \"eventId\": \"9d720f99-1b5a-4141-9877-d32985391e18\"\n}} "],
          "type": "curl",
          "extra": {}
        }],
        "extra": {}
      },
      "extra":       {
        "hasRest": true,
        "rpcRequestName": "GetPolicyRequest",
        "rpcResponseName": "GetPolicyResponse"
      },
      "customLabels": []
    },
        {
      "name": "Query Policies",
      "methodName": "QueryPolicies",
      "serviceName": "PolicyManagement",
      "tag": "Policy",
      "permissions": [      {
        "name": "Read Policies",
        "description": "Request permission to read basic events policy info."
      }],
      "events": [],
      "labels": [],
      "nameParams": [],
      "requiredFields": ["query"],
      "params": [      {
        "in": "BODY",
        "name": "query",
        "type": "All APIs.Policies v2._wix_events_v2_policy_upstream_wix_common_QueryV2",
        "doc": " Query options. See [API Query Langauge](https://dev.wix.com/api/rest/getting-started/api-query-language) for more details.\n",
        "required": true
      }],
      "ret":       {
        "type":         {
          "name": "QueryPolicies",
          "statusCode": "200",
          "typeParams": ["All APIs.Policies v2._wix_events_v2_QueryPoliciesResponse"]
        },
        "doc": ""
      },
      "locations": [],
      "docs":       {
        "summary": " Retrieves a list of policies according to the provided filters and paging.\n \n",
        "description": [],
        "request": "POST",
        "url": "https://www.wixapis.com/events-policies/v2/policies/query",
        "links": [],
        "examples": [        {
          "title": "Query policies by event ID and sort by created date in descending order",
          "body": ["curl -X POST 'https://www.wixapis.com/events-policies/v2/policies/query' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: <AUTH TOKEN>' \\\n--data-binary '{\n  \"query\": {\n    \"filter\": {\n      \"eventId\": {\n        \"$eq\": \"9d720f99-1b5a-4141-9877-d32985391e18\"\n      }\n    },\n    \"sort\": [\n      {\n        \"fieldName\": \"createdDate\",\n        \"order\": \"DESC\"\n      }\n    ]\n  }\n}'"],
          "response": ["{\n  \"policies\":   [\n        {\n      \"id\": \"eef70fb3-8567-4861-9f77-ebd2ad3682d5\",\n      \"revision\": \"1\",\n      \"createdDate\": \"2023-02-14T12:31:52.850Z\",\n      \"updatedDate\": \"2023-02-14T12:31:52.850Z\",\n      \"name\": \"Terms and Conditions Event 1\",\n      \"body\": \"<p>Tickets to this Event are issued on behalf of the Organiser and are subject to the following terms and conditions.<\\/p>\",\n      \"eventId\": \"9d720f99-1b5a-4141-9877-d32985391e18\"\n    },\n        {\n      \"id\": \"7243931d-74e4-4d6a-91f0-4835fa79161e\",\n      \"revision\": \"1\",\n      \"createdDate\": \"2023-02-14T11:54:08.379Z\",\n      \"updatedDate\": \"2023-02-14T11:54:08.379Z\",\n      \"name\": \"Terms and Conditions Event 2\",\n      \"body\": \"Nobody will be allowed admission to the Event without a valid ticket or pass.\",\n      \"eventId\": \"9d720f99-1b5a-4141-9877-d32985391e18\"\n    }\n  ],\n  \"metadata\":   {\n    \"count\": 2,\n    \"cursors\": {}\n  }\n} "],
          "type": "curl",
          "extra": {}
        }],
        "extra": {}
      },
      "extra":       {
        "hasRest": true,
        "rpcRequestName": "QueryPoliciesRequest",
        "rpcResponseName": "QueryPoliciesResponse"
      },
      "customLabels": []
    },
        {
      "name": "Reorder Event Policies",
      "methodName": "ReorderEventPolicies",
      "serviceName": "PolicyManagement",
      "tag": "Policy",
      "permissions": [      {
        "name": "Manage Policies",
        "description": "Request permission to read, create and change events policies."
      }],
      "events": [],
      "labels": [],
      "nameParams": [],
      "params":       [
                {
          "in": "BODY",
          "name": "eventId",
          "type": "string",
          "doc": " Event ID.\n",
          "required": false
        },
                {
          "in": "BODY",
          "name": "policyId",
          "type": "string",
          "doc": " Policy ID.\n",
          "required": false
        },
                {
          "in": "BODY",
          "name": "referencePolicy",
          "type": "All APIs.Policies v2._wix_events_v2_ReorderEventPoliciesRequest_ReferencePolicy",
          "doc": "",
          "required": false
        }
      ],
      "ret":       {
        "type":         {
          "name": "ReorderEventPolicies",
          "statusCode": "200",
          "typeParams": ["All APIs.Policies v2._wix_events_v2_ReorderEventPoliciesResponse"]
        },
        "doc": ""
      },
      "locations": [],
      "docs":       {
        "summary": " Changes policy order in an event dashboard and agreement checkbox on the checkout form.\n \n",
        "description": [],
        "request": "POST",
        "url": "https://www.wixapis.com/events-policies/v2/policies/reorder",
        "links": [],
        "examples": [        {
          "title": "Reorder Policies",
          "body": ["curl -X POST 'https://www.wixapis.com/events-policies/v2/policies/reorder' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: <AUTH TOKEN>' \\\n--data-binary '{\n  \"eventId\": \"9d720f99-1b5a-4141-9877-d32985391e18\",\n  \"policyId\": \"7243931d-74e4-4d6a-91f0-4835fa79161e\",\n  \"beforePolicyId\": \"0edc5dc9-3c0b-4b80-80c7-452d4009bf89\"\n}'"],
          "response": ["{\"policies\": [\n    {\n    \"id\": \"eef70fb3-8567-4861-9f77-ebd2ad3682d5\",\n    \"revision\": \"2\",\n    \"createdDate\": \"2023-02-14T12:31:52.850Z\",\n    \"updatedDate\": \"2023-02-14T13:29:17.308Z\",\n    \"name\": \"Terms and Conditions Event 1\",\n    \"body\": \"<p>Tickets to this Event are issued on behalf of the Organiser and are subject to the following terms and conditions.<\\/p>\",\n    \"eventId\": \"9d720f99-1b5a-4141-9877-d32985391e18\"\n  },\n    {\n    \"id\": \"7243931d-74e4-4d6a-91f0-4835fa79161e\",\n    \"revision\": \"3\",\n    \"createdDate\": \"2023-02-14T11:54:08.379Z\",\n    \"updatedDate\": \"2023-02-14T13:29:17.308Z\",\n    \"name\": \"Terms and Conditions Event 2\",\n    \"body\": \"Nobody will be allowed admission to the Event without a valid ticket or pass.\",\n    \"eventId\": \"9d720f99-1b5a-4141-9877-d32985391e18\"\n  },\n    {\n    \"id\": \"0edc5dc9-3c0b-4b80-80c7-452d4009bf89\",\n    \"revision\": \"1\",\n    \"createdDate\": \"2023-02-14T12:54:28.557Z\",\n    \"updatedDate\": \"2023-02-14T12:54:28.557Z\",\n    \"name\": \"Terms and Conditions Event 3\",\n    \"body\": \"<p>All tickets or passes should be checked on purchase, as mistakes cannot always be rectified.<\\/p>\",\n    \"eventId\": \"9d720f99-1b5a-4141-9877-d32985391e18\"\n  }\n]} "],
          "type": "curl",
          "extra": {}
        }],
        "extra": {}
      },
      "extra":       {
        "hasRest": true,
        "rpcRequestName": "ReorderEventPoliciesRequest",
        "rpcResponseName": "ReorderEventPoliciesResponse"
      },
      "customLabels": []
    },
        {
      "name": "Update Policy",
      "methodName": "UpdatePolicy",
      "serviceName": "PolicyManagement",
      "tag": "Policy",
      "permissions": [      {
        "name": "Manage Policies",
        "description": "Request permission to read, create and change events policies."
      }],
      "events": [],
      "labels": [],
      "nameParams": [],
      "requiredFields":       [
        "policy",
        "policy.name",
        "policy.id",
        "policy.body",
        "policy.eventId",
        "policy.revision"
      ],
      "params":       [
                {
          "in": "PATH",
          "name": "policy.id",
          "type": "string",
          "doc": " Policy ID.\n",
          "required": true
        },
                {
          "in": "BODY",
          "name": "policy",
          "type": "All APIs.Policies v2._wix_events_v2_Policy",
          "doc": " Policy to update.\n",
          "required": true
        }
      ],
      "ret":       {
        "type":         {
          "name": "UpdatePolicy",
          "statusCode": "200",
          "typeParams": ["All APIs.Policies v2._wix_events_v2_UpdatePolicyResponse"]
        },
        "doc": ""
      },
      "locations": [],
      "docs":       {
        "summary": " Updates a policy.    \n Each time the policy is updated, `revision` increments by 1. The existing `revision` must be included when updating the policy. This ensures you're working with the latest policy and prevents unintended overwrites.\n \n",
        "description": [],
        "request": "PATCH",
        "url": "https://www.wixapis.com/events-policies/v2/policies/{policy.id}",
        "links": [],
        "examples": [        {
          "title": "Update Policy",
          "body": ["curl -X PATCH 'https://manage.wix.com/_api/events-policies/v2/policies/7243931d-74e4-4d6a-91f0-4835fa79161e' \\\n-H 'Content-Type: application/json' \\\n-H 'Authorization: <AUTH TOKEN>' \\\n--data-binary '{\n  \"policy\": {\n    \"id\": \"7223931d-74e4-4d6a-91f0-4835fa79161e\",\n    \"name\": \"Terms and Conditions Event 4\",\n    \"body\": \"Tickets cannot be exchanged or refunded after purchase – unless booked under our ‘Booking with Confidence Promise during 2021’. Please note that duplicate tickets cannot be issued under any circumstances.\",\n    \"eventId\": \"9d720f99-1b5a-4141-9877-d32985391e18\",\n    \"revision\": \"1\"\n  }\n}'"],
          "response": ["{\"policy\": {\n  \"id\": \"7243931d-74e4-4d6a-91f0-4835fa79161e\",\n  \"revision\": \"2\",\n  \"createdDate\": \"2023-02-14T11:54:08.379Z\",\n  \"updatedDate\": \"2023-02-14T13:22:13.564Z\",\n  \"name\": \"Terms and Conditions Event 4\",\n  \"body\": \"If the Event is rescheduled, changed, moved or cancelled the Organiser cannot be held responsible for any resulting costs you may incur for travel, accommodation and other related goods, services or compensation.\",\n  \"eventId\": \"9d720f99-1b5a-4141-9877-d32985391e18\"\n}} "],
          "type": "curl",
          "extra": {}
        }],
        "extra": {}
      },
      "extra":       {
        "hasRest": true,
        "rpcRequestName": "UpdatePolicyRequest",
        "rpcResponseName": "UpdatePolicyResponse"
      },
      "customLabels": []
    }
  ],
  "events":   [
        {
      "type": "_wix_events_v2_PolicyUpdatedDomainEvent",
      "name": "Policy Updated Webhook",
      "docs":       {
        "summary": " Triggered when a policy is updated.\n",
        "src": "https://github.com/wix-private/events/tree/master/events-services/events-policies/src/main/proto/wix/events/v2/policy_management.proto"
      },
      "topic": "domain_events_wix.events.v2.policy",
      "tag": "Policy",
      "permissions": [      {
        "name": "Read Policies",
        "description": "Request permission to read basic events policy info."
      }],
      "customLabels": [],
      "eventType": "wix.events.v2.policy_updated",
      "extra": {"isDomainEvent": true}
    },
        {
      "type": "_wix_events_v2_PolicyDeletedDomainEvent",
      "name": "Policy Deleted Webhook",
      "docs":       {
        "summary": " Triggered when a policy is deleted.\n",
        "src": "https://github.com/wix-private/events/tree/master/events-services/events-policies/src/main/proto/wix/events/v2/policy_management.proto"
      },
      "topic": "domain_events_wix.events.v2.policy",
      "tag": "Policy",
      "permissions": [      {
        "name": "Read Policies",
        "description": "Request permission to read basic events policy info."
      }],
      "customLabels": [],
      "eventType": "wix.events.v2.policy_deleted",
      "extra": {"isDomainEvent": true}
    },
        {
      "type": "_wix_events_v2_PolicyCreatedDomainEvent",
      "name": "Policy Created Webhook",
      "docs":       {
        "summary": " Triggered when a policy is created.\n",
        "src": "https://github.com/wix-private/events/tree/master/events-services/events-policies/src/main/proto/wix/events/v2/policy_management.proto"
      },
      "topic": "domain_events_wix.events.v2.policy",
      "tag": "Policy",
      "permissions": [      {
        "name": "Read Policies",
        "description": "Request permission to read basic events policy info."
      }],
      "customLabels": [],
      "eventType": "wix.events.v2.policy_created",
      "extra": {"isDomainEvent": true}
    }
  ],
  "callbacks": [],
  "messages":   [
        {
      "name": "_wix_events_v2_PolicyUpdatedDomainEvent",
      "displayName": "Policy Updated Domain Event Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": [        {
          "title": "",
          "body": ["{\n  \"id\" : \"35bac96d-0d27-4a69-a905-2c7dfa161e28\",\n  \"entityFqdn\" : \"wix.events.v2.policy\",\n  \"slug\" : \"updated\",\n  \"entityId\" : \"e9bf5e65-b38d-4732-ac7f-268f94d95975\",\n  \"updatedEvent\" : {\n    \"currentEntityAsJson\" : {\n      \"id\" : \"e9bf5e65-b38d-4732-ac7f-268f94d95975\",\n      \"revision\" : \"2\",\n      \"createdDate\" : \"2023-02-23T11:44:16.564Z\",\n      \"updatedDate\" : \"2023-02-23T11:49:44.568Z\",\n      \"name\" : \"Terms and Conditions Event 4\",\n      \"body\" : \"If the Event is rescheduled, changed, moved or cancelled the Organiser cannot be held responsible for any resulting costs you may incur for travel, accommodation and other related goods, services or compensation.\",\n      \"eventId\" : \"1145ae58-f1e4-4e11-aa7a-9292f0e356e8\"\n    }\n  },\n  \"eventTime\" : \"2023-02-23T11:49:44.576305Z\",\n  \"triggeredByAnonymizeRequest\" : false,\n  \"entityEventSequence\" : \"2\"\n} "],
          "type": "json",
          "extra": {}
        }]
      },
      "members":       [
                {
          "name": "id",
          "type": "string",
          "doc": "Unique event ID."
        },
                {
          "name": "entityFqdn",
          "type": "string",
          "doc": "Expected `wix.events.v2.policy`.\nFully Qualified Domain Name."
        },
                {
          "name": "slug",
          "type": "string",
          "doc": "Expected `updated`.\nEvent name."
        },
                {
          "name": "updatedEvent",
          "type": "All APIs.Policies v2._wix_events_v2_PolicyEntityUpdatedEvent",
          "doc": "Event Info"
        },
                {
          "name": "entityId",
          "type": "string",
          "doc": "Policy ID associated with this event."
        },
                {
          "name": "eventTime",
          "type": "string",
          "doc": "Event timestamp."
        },
                {
          "name": "triggeredByAnonymizeRequest",
          "type": "boolean",
          "doc": "Whether this event was triggered as a result of a privacy regulation application (e.g., GDPR)."
        },
                {
          "name": "originatedFrom",
          "type": "string",
          "doc": "If present, indicates the action that triggered the event."
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_PolicyEntityUpdatedEvent",
      "displayName": "Policy Entity Updated Event Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "currentEntity",
        "type": "All APIs.Policies v2._wix_events_v2_Policy",
        "doc": "Event body"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_PolicyDeletedDomainEvent",
      "displayName": "Policy Deleted Domain Event Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": [        {
          "title": "",
          "body": ["{\n  \"id\" : \"3600c836-1e2a-4f91-bdd6-a6302316805a\",\n  \"entityFqdn\" : \"wix.events.v2.policy\",\n  \"slug\" : \"deleted\",\n  \"entityId\" : \"e9bf5e65-b38d-4732-ac7f-268f94d95975\",\n  \"deletedEvent\" : {\n    \"movedToTrash\" : true\n  },\n  \"eventTime\" : \"2023-02-23T11:51:00.542009Z\",\n  \"triggeredByAnonymizeRequest\" : false\n} "],
          "type": "json",
          "extra": {}
        }]
      },
      "members":       [
                {
          "name": "id",
          "type": "string",
          "doc": "Unique event ID."
        },
                {
          "name": "entityFqdn",
          "type": "string",
          "doc": "Expected `wix.events.v2.policy`.\nFully Qualified Domain Name."
        },
                {
          "name": "slug",
          "type": "string",
          "doc": "Expected `deleted`.\nEvent name."
        },
                {
          "name": "deletedEvent",
          "type": "All APIs.Policies v2._wix_events_v2_PolicyEntityDeletedEvent",
          "doc": "Event Info"
        },
                {
          "name": "entityId",
          "type": "string",
          "doc": "Policy ID associated with this event."
        },
                {
          "name": "eventTime",
          "type": "string",
          "doc": "Event timestamp."
        },
                {
          "name": "triggeredByAnonymizeRequest",
          "type": "boolean",
          "doc": "Whether this event was triggered as a result of a privacy regulation application (e.g., GDPR)."
        },
                {
          "name": "originatedFrom",
          "type": "string",
          "doc": "If present, indicates the action that triggered the event."
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_PolicyEntityDeletedEvent",
      "displayName": "Policy Entity Deleted Event Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_PolicyCreatedDomainEvent",
      "displayName": "Policy Created Domain Event Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": [        {
          "title": "",
          "body": ["{\n  \"id\" : \"d2ac890c-217d-4613-9216-232759230bc8\",\n  \"entityFqdn\" : \"wix.events.v2.policy\",\n  \"slug\" : \"created\",\n  \"entityId\" : \"6329e76a-773d-4319-bdce-1d522890e319\",\n  \"createdEvent\" : {\n    \"entityAsJson\" : {\n      \"id\" : \"6329e76a-773d-4319-bdce-1d522890e319\",\n      \"revision\" : \"1\",\n      \"createdDate\" : \"2023-02-23T11:28:21.954Z\",\n      \"updatedDate\" : \"2023-02-23T11:28:21.954Z\",\n      \"name\" : \"Terms and Conditions Event 1\",\n      \"body\" : \"<p>Tickets to this Event are issued on behalf of the Organiser and are subject to the following terms and conditions.<\/p>\",\n      \"eventId\" : \"3d3d5c04-ece0-45a8-85f0-11a58edaa192\"\n    }\n  },\n  \"eventTime\" : \"2023-02-23T11:28:21.958239Z\",\n  \"triggeredByAnonymizeRequest\" : false,\n  \"entityEventSequence\" : \"1\"\n} "],
          "type": "json",
          "extra": {}
        }]
      },
      "members":       [
                {
          "name": "id",
          "type": "string",
          "doc": "Unique event ID."
        },
                {
          "name": "entityFqdn",
          "type": "string",
          "doc": "Expected `wix.events.v2.policy`.\nFully Qualified Domain Name."
        },
                {
          "name": "slug",
          "type": "string",
          "doc": "Expected `created`.\nEvent name."
        },
                {
          "name": "createdEvent",
          "type": "All APIs.Policies v2._wix_events_v2_PolicyEntityCreatedEvent",
          "doc": "Event Info"
        },
                {
          "name": "entityId",
          "type": "string",
          "doc": "Policy ID associated with this event."
        },
                {
          "name": "eventTime",
          "type": "string",
          "doc": "Event timestamp."
        },
                {
          "name": "triggeredByAnonymizeRequest",
          "type": "boolean",
          "doc": "Whether this event was triggered as a result of a privacy regulation application (e.g., GDPR)."
        },
                {
          "name": "originatedFrom",
          "type": "string",
          "doc": "If present, indicates the action that triggered the event."
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_PolicyEntityCreatedEvent",
      "displayName": "Policy Entity Created Event Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "entity",
        "type": "All APIs.Policies v2._wix_events_v2_Policy",
        "doc": "Event body"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_Policy",
      "displayName": "Policy Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": [        {
          "title": "",
          "body": ["{\n  \"policy\" : {\n    \"id\" : \"eef70fb3-8567-4861-9f77-ebd2ad3682d5\",\n    \"revision\" : \"1\",\n    \"createdDate\" : \"2023-02-14T11:54:51.037Z\",\n    \"updatedDate\" : \"2023-02-14T11:54:51.037Z\",\n    \"name\" : \"Terms and Conditions Event 1\",\n    \"body\" : \"<p>Tickets to this Event are issued on behalf of the Organiser and are subject to the following terms and conditions.<\/p>\",\n    \"eventId\" : \"9d720f99-1b5a-4141-9877-d32985391e18\"\n  }\n} "],
          "type": "json",
          "extra": {}
        }]
      },
      "members":       [
                {
          "name": "id",
          "type": "string",
          "doc": " Policy ID.\n",
          "readOnly": true
        },
                {
          "name": "revision",
          "type": "string",
          "doc": " Revision number, which increments by 1 each time the policy is updated. To prevent conflicting changes, the existing revision must be used when updating a policy.\n",
          "readOnly": true
        },
                {
          "name": "createdDate",
          "type": "string",
          "doc": " Date and time when the policy was created in `yyyy-mm-ddThh:mm:sssZ` format.\n",
          "readOnly": true
        },
                {
          "name": "updatedDate",
          "type": "string",
          "doc": " Date and time of the policy's latest update in `yyyy-mm-ddThh:mm:sssZ` format.\n",
          "readOnly": true
        },
                {
          "name": "name",
          "type": "string",
          "doc": " Policy name.    \n\nMin: 1 character  \nMax: 40 characters\n"
        },
                {
          "name": "body",
          "type": "string",
          "doc": " Policy body. Here you can enter various terms and conditions.    \n\nMin: 1 character    \nMax: 50000 characters\n"
        },
                {
          "name": "eventId",
          "type": "string",
          "doc": " Event ID to which the policy belongs.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_policy_upstream_wix_common_Paging",
      "displayName": "Paging Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "limit",
          "type": "integer",
          "doc": " Number of items to load per page.\n"
        },
                {
          "name": "offset",
          "type": "integer",
          "doc": " Number of items to skip in the current sort order.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_policy_upstream_wix_common_CursorPaging",
      "displayName": "Cursor Paging Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "limit",
          "type": "integer",
          "doc": " Number of items to load per page.\n"
        },
                {
          "name": "cursor",
          "type": "string",
          "doc": "\nPointer to the next or previous page in the list of results.\nYou can get the relevant cursor token\nfrom the `pagingMetadata` object in the previous call's response.\nNot relevant for the first request.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_policy_upstream_wix_common_PagingMetadataV2",
      "displayName": "Paging Metadata V 2 Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "count",
          "type": "integer",
          "doc": " Number of items returned in the response.\n"
        },
                {
          "name": "offset",
          "type": "integer",
          "doc": " Offset that was requested.\n"
        },
                {
          "name": "total",
          "type": "integer",
          "doc": " Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set.\n"
        },
                {
          "name": "tooManyToCount",
          "type": "boolean",
          "doc": " Flag that indicates the server failed to calculate the `total` field.\n"
        },
                {
          "name": "cursors",
          "type": "All APIs.Policies v2._wix_events_v2_policy_upstream_wix_common_Cursors",
          "doc": " Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_policy_upstream_wix_common_Cursors",
      "displayName": "Cursors Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "next",
          "type": "string",
          "doc": " Cursor pointing to next page in the list of results.\n"
        },
                {
          "name": "prev",
          "type": "string",
          "doc": " Cursor pointing to previous page in the list of results.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_policy_upstream_wix_common_Sorting",
      "displayName": "Sorting Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "fieldName",
          "type": "string",
          "doc": " Name of the field to sort by.\n"
        },
                {
          "name": "order",
          "type": "All APIs.Policies v2._wix_common_SortOrder",
          "doc": "Sort order (ASC/DESC). Defaults to ASC\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_policy_upstream_wix_common_QueryV2",
      "displayName": "Query V 2 Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "filter",
          "type": "struct",
          "doc": "Filter object in the following format: <br/> `\"filter\" : { \"fieldName1\": \"value1\", \"fieldName2\":{\"$operator\":\"value2\"} }`. <br/> <br/> **Example:** <br/> `\"filter\" : { \"id\": \"2224a9d1-79e6-4549-a5c5-bf7ce5aac1a5\", \"revision\": {\"$ne\":\"1\"} }` <br/> <br/> See [supported fields and operators](https://dev.wix.com/api/rest/wix-events/wix-events/filter-and-sort) for more information.\n"
        },
                {
          "name": "sort",
          "type":           {
            "name": "array",
            "typeParams": ["All APIs.Policies v2._wix_events_v2_policy_upstream_wix_common_Sorting"]
          },
          "doc": "Sort object in the following format: <br/> `[{\"fieldName\":\"sortField1\"},{\"fieldName\":\"sortField2\",\"direction\":\"DESC\"}]` <br/> <br/> **Example:** <br/> `[{\"fieldName\":\"createdDate\",\"direction\":\"DESC\"}]` <br/> <br/> See [supported fields](https://dev.wix.com/api/rest/wix-events/wix-events/filter-and-sort) for more information.\n"
        },
                {
          "name": "pagingMethod",
          "type": "All APIs.Policies v2._wix_events_v2_policy_upstream_wix_common_QueryV2_pagingMethod",
          "doc": ""
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_policy_upstream_wix_common_QueryV2_pagingMethod",
      "displayName": "paging Method Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "paging",
          "type": "All APIs.Policies v2._wix_events_v2_policy_upstream_wix_common_Paging",
          "doc": "Pagination options.\n"
        },
                {
          "name": "cursorPaging",
          "type": "All APIs.Policies v2._wix_events_v2_policy_upstream_wix_common_CursorPaging",
          "doc": "Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": [],
      "oneOf": true
    },
        {
      "name": "_google_protobuf_Empty",
      "displayName": "Empty Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_google_protobuf_FieldMask",
      "displayName": "Field Mask Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "paths",
        "type":         {
          "name": "array",
          "typeParams": ["string"]
        },
        "doc": " The set of field mask paths.\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wix_events_upstream_wix_common_Address",
      "displayName": "Address Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "country",
          "type": "string",
          "doc": " country code\n"
        },
                {
          "name": "subdivision",
          "type": "string",
          "doc": " subdivision (usually state or region) code according to ISO 3166-2\n"
        },
                {
          "name": "city",
          "type": "string",
          "doc": " city name\n"
        },
                {
          "name": "postalCode",
          "type": "string",
          "doc": " zip/postal code\n"
        },
                {
          "name": "street",
          "type": "All APIs.Policies v2._com_wix_events_upstream_wix_common_Address_street",
          "doc": ""
        },
                {
          "name": "addressLine2",
          "type": "string",
          "doc": " Free text providing more detailed address info. Usually contains Apt, Suite, Floor\n"
        },
                {
          "name": "formattedAddress",
          "type": "string",
          "doc": " A string containing the human-readable address of this location\n"
        },
                {
          "name": "hint",
          "type": "string",
          "doc": " Free text for human-to-human textual orientation aid purposes\n"
        },
                {
          "name": "geocode",
          "type": "All APIs.Policies v2._com_wix_events_upstream_wix_common_AddressLocation",
          "doc": " coordinates of the physical address\n"
        },
                {
          "name": "countryFullname",
          "type": "string",
          "doc": " country full-name\n"
        },
                {
          "name": "subdivisions",
          "type":           {
            "name": "array",
            "typeParams": ["All APIs.Policies v2._com_wix_events_upstream_wix_common_Subdivision"]
          },
          "doc": " multi-level subdivisions from top to bottom\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wix_events_upstream_wix_common_Address_street",
      "displayName": "street Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "streetAddress",
          "type": "All APIs.Policies v2._com_wix_events_upstream_wix_common_StreetAddress",
          "doc": " a break down of the street to number and street name\n"
        },
                {
          "name": "addressLine",
          "type": "string",
          "doc": " Main address line (usually street and number) as free text\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": [],
      "oneOf": true
    },
        {
      "name": "_com_wix_events_upstream_wix_common_Subdivision",
      "displayName": "Subdivision Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "code",
          "type": "string",
          "doc": " subdivision short code\n"
        },
                {
          "name": "name",
          "type": "string",
          "doc": " subdivision full-name\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wix_events_upstream_wix_common_StreetAddress",
      "displayName": "Street Address Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "number",
          "type": "string",
          "doc": " street number\n"
        },
                {
          "name": "name",
          "type": "string",
          "doc": " street name\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_com_wix_events_upstream_wix_common_AddressLocation",
      "displayName": "Address Location Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "latitude",
          "type": "number",
          "doc": ""
        },
                {
          "name": "longitude",
          "type": "number",
          "doc": ""
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_MapCoordinates",
      "displayName": "Map Coordinates Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "lat",
          "type": "number",
          "doc": " Latitude.\n"
        },
                {
          "name": "lng",
          "type": "number",
          "doc": " Longitude.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_Location",
      "displayName": "Location Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "name",
          "type": "string",
          "doc": " Location name.\n"
        },
                {
          "name": "coordinates",
          "type": "All APIs.Policies v2._wix_events_MapCoordinates",
          "doc": " Location map coordinates.\n"
        },
                {
          "name": "address",
          "type": "string",
          "doc": " Single line address representation.\n"
        },
                {
          "name": "type",
          "type": "All APIs.Policies v2._wix_events_Location_LocationType",
          "doc": " Location type.\n"
        },
                {
          "name": "fullAddress",
          "type": "All APIs.Policies v2._com_wix_events_upstream_wix_common_Address",
          "doc": " Full address derived from formatted single line `address`.\n When `full_address` is used to create or update the event, deprecated `address` and `coordinates` are ignored.\n If provided `full_address` has empty `formatted_address` or `coordinates`, it will be auto-completed using Atlas service.\n\n Migration notes:\n - `full_address.formatted_address` is equivalent to `address`.\n - `full_address.geocode` is equivalent to `coordinates`.\n"
        },
                {
          "name": "tbd",
          "type": "boolean",
          "doc": " Defines event location as TBD (To Be Determined).\n When event location is not yet defined, `name` is displayed instead of location address.\n `coordinates`, `address`, `type` and `full_address` are not required when location is TBD.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_ScheduleConfig",
      "displayName": "Schedule Config Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "scheduleTbd",
          "type": "boolean",
          "doc": " Defines event as TBD (To Be Determined) schedule.\n When event time is not yet defined, TBD message is displayed instead of event start and end times.\n `startDate`, `endDate` and `timeZoneId` are not required when schedule is TBD.\n"
        },
                {
          "name": "scheduleTbdMessage",
          "type": "string",
          "doc": " TBD message.\n"
        },
                {
          "name": "startDate",
          "type": "string",
          "doc": " Event start timestamp.\n"
        },
                {
          "name": "endDate",
          "type": "string",
          "doc": " Event end timestamp.\n"
        },
                {
          "name": "timeZoneId",
          "type": "string",
          "doc": " Event time zone ID in TZ database format, e.g., `EST`, `America/Los_Angeles`.\n"
        },
                {
          "name": "endDateHidden",
          "type": "boolean",
          "doc": " Whether end date is hidden in the formatted schedule.\n"
        },
                {
          "name": "showTimeZone",
          "type": "boolean",
          "doc": " Whether time zone is displayed in formatted schedule.\n"
        },
                {
          "name": "recurrences",
          "type": "All APIs.Policies v2._wix_events_Recurrences",
          "doc": " Event recurrences.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_Recurrences",
      "displayName": "Recurrences Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "occurrences",
          "type":           {
            "name": "array",
            "typeParams": ["All APIs.Policies v2._wix_events_Occurrence"]
          },
          "doc": " Event occurrences.\n"
        },
                {
          "name": "categoryId",
          "type": "string",
          "doc": " Recurring event category ID.\n",
          "readOnly": true
        },
                {
          "name": "status",
          "type": "All APIs.Policies v2._wix_events_RecurrenceStatus_Status",
          "doc": " Recurrence status.\n",
          "readOnly": true
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_Occurrence",
      "displayName": "Occurrence Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "startDate",
          "type": "string",
          "doc": " Event start timestamp.\n"
        },
                {
          "name": "endDate",
          "type": "string",
          "doc": " Event end timestamp.\n"
        },
                {
          "name": "timeZoneId",
          "type": "string",
          "doc": " Event time zone ID in TZ database format, e.g., `EST`, `America/Los_Angeles`.\n"
        },
                {
          "name": "showTimeZone",
          "type": "boolean",
          "doc": " Whether time zone is displayed in formatted schedule.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "ticketDefinitionsMapEntry",
      "displayName": "ticket Definitions Map Entry Object",
      "locations": [],
      "docs":       {
        "summary": "Set of key-value pairs. Map of copied ticket definitions from original event.\n Key represents ticket def id in the original event.\n Value represents ticket def id in the newly created event.\n",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "key:value",
        "type": "string",
        "doc": "`key` of type string, `value` of type string"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_events_EventCopied",
      "displayName": "Event Copied Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "timestamp",
          "type": "string",
          "doc": "Event created timestamp in ISO UTC format.\n"
        },
                {
          "name": "eventId",
          "type": "string",
          "doc": "  Event ID.\n"
        },
                {
          "name": "location",
          "type": "All APIs.Policies v2._wix_events_Location",
          "doc": " Event location.\n"
        },
                {
          "name": "scheduleConfig",
          "type": "All APIs.Policies v2._wix_events_ScheduleConfig",
          "doc": " Event schedule configuration.\n"
        },
                {
          "name": "title",
          "type": "string",
          "doc": " Event title.\n"
        },
                {
          "name": "userId",
          "type": "string",
          "doc": " Event creator user ID.\n"
        },
                {
          "name": "status",
          "type": "All APIs.Policies v2._wix_events_EventStatus",
          "doc": " Event status.\n"
        },
                {
          "name": "derivedFromInstanceId",
          "type": "string",
          "doc": " Instance ID. Indicates the original app instance which current event was derived from.\n"
        },
                {
          "name": "derivedFromEventId",
          "type": "string",
          "doc": " Event ID. Indicates the original event which current event was derived from.\n"
        },
                {
          "name": "ticketDefinitions",
          "type": "All APIs.Policies v2.ticketDefinitionsMapEntry",
          "doc": "Set of key-value pairs. Map of copied ticket definitions from original event.\n Key represents ticket def id in the original event.\n Value represents ticket def id in the newly created event.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_CreatePolicyRequest",
      "displayName": "Create Policy Request Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "policy",
        "type": "All APIs.Policies v2._wix_events_v2_Policy",
        "doc": " Policy info.\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_CreatePolicyResponse",
      "displayName": "Create Policy Response Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "policy",
        "type": "All APIs.Policies v2._wix_events_v2_Policy",
        "doc": " Created policy.\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_UpdatePolicyRequest",
      "displayName": "Update Policy Request Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "policy",
        "type": "All APIs.Policies v2._wix_events_v2_Policy",
        "doc": " Policy to update.\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_UpdatePolicyResponse",
      "displayName": "Update Policy Response Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "policy",
        "type": "All APIs.Policies v2._wix_events_v2_Policy",
        "doc": " The updated policy.\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_UpdatePolicySortIndexRequest",
      "displayName": "Update Policy Sort Index Request Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "policyId",
          "type": "string",
          "doc": " Policy's ID\n"
        },
                {
          "name": "revision",
          "type": "string",
          "doc": " The revision of the Event Policy\n"
        },
                {
          "name": "sortIndex",
          "type": "integer",
          "doc": " the sort index of a policy to set\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_UpdatePolicySortIndexResponse",
      "displayName": "Update Policy Sort Index Response Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "policy",
        "type": "All APIs.Policies v2._wix_events_v2_Policy",
        "doc": " the updated Event Policy\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_DeletePolicyRequest",
      "displayName": "Delete Policy Request Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "policyId",
          "type": "string",
          "doc": " ID of the policy to delete.\n"
        },
                {
          "name": "revision",
          "type": "string",
          "doc": " Revision of the policy to delete.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_DeletePolicyResponse",
      "displayName": "Delete Policy Response Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_QueryPoliciesRequest",
      "displayName": "Query Policies Request Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "query",
        "type": "All APIs.Policies v2._wix_events_v2_policy_upstream_wix_common_QueryV2",
        "doc": " Query options. See [API Query Langauge](https://dev.wix.com/api/rest/getting-started/api-query-language) for more details.\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_QueryPoliciesResponse",
      "displayName": "Query Policies Response Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "policies",
          "type":           {
            "name": "array",
            "typeParams": ["All APIs.Policies v2._wix_events_v2_Policy"]
          },
          "doc": " List of policies.\n"
        },
                {
          "name": "metadata",
          "type": "All APIs.Policies v2._wix_events_v2_policy_upstream_wix_common_PagingMetadataV2",
          "doc": " Metadata for the paginated results.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_ReorderEventPoliciesRequest",
      "displayName": "Reorder Event Policies Request Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "eventId",
          "type": "string",
          "doc": " Event ID.\n"
        },
                {
          "name": "policyId",
          "type": "string",
          "doc": " Policy ID.\n"
        },
                {
          "name": "referencePolicy",
          "type": "All APIs.Policies v2._wix_events_v2_ReorderEventPoliciesRequest_ReferencePolicy",
          "doc": ""
        }
      ],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_ReorderEventPoliciesRequest_ReferencePolicy",
      "displayName": "Reference Policy Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members":       [
                {
          "name": "beforePolicyId",
          "type": "string",
          "doc": " Move the given `policyId` before the referenced policy.\n"
        },
                {
          "name": "afterPolicyId",
          "type": "string",
          "doc": " Move the given `policyId` after the referenced policy.\n"
        }
      ],
      "enum": null,
      "extra": {},
      "labels": [],
      "oneOf": true
    },
        {
      "name": "_wix_events_v2_ReorderEventPoliciesResponse",
      "displayName": "Reorder Event Policies Response Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "policies",
        "type":         {
          "name": "array",
          "typeParams": ["All APIs.Policies v2._wix_events_v2_Policy"]
        },
        "doc": " Policies in the new order.\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_GetPolicyRequest",
      "displayName": "Get Policy Request Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "policyId",
        "type": "string",
        "doc": " Policy ID.\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_v2_GetPolicyResponse",
      "displayName": "Get Policy Response Object",
      "locations": [],
      "docs":       {
        "summary": "",
        "links": [],
        "examples": []
      },
      "members": [      {
        "name": "policy",
        "type": "All APIs.Policies v2._wix_events_v2_Policy",
        "doc": " The requested policy.\n"
      }],
      "enum": null,
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_common_SortOrder",
      "displayName": "Sort Order Object",
      "locations": [],
      "docs":       {
        "summary": " \n Possible values are: <li><code> ASC <\/code><\/li><li><code> DESC <\/code><\/li>",
        "links": [],
        "examples": []
      },
      "members": [],
      "enum":       [
        "ASC",
        "DESC"
      ],
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_common_Subdivision_SubdivisionType",
      "displayName": "Subdivision Type Object",
      "locations": [],
      "docs":       {
        "summary": " \n Possible values are: <li><code> UNKNOWN_SUBDIVISION_TYPE <\/code><\/li><li><code> ADMINISTRATIVE_AREA_LEVEL_1 -  State\n <\/code><\/li><li><code> ADMINISTRATIVE_AREA_LEVEL_2 -  County\n <\/code><\/li><li><code> ADMINISTRATIVE_AREA_LEVEL_3 -  City/town\n <\/code><\/li><li><code> ADMINISTRATIVE_AREA_LEVEL_4 -  Neighborhood/quarter\n <\/code><\/li><li><code> ADMINISTRATIVE_AREA_LEVEL_5 -  Street/block\n <\/code><\/li><li><code> COUNTRY -  ADMINISTRATIVE_AREA_LEVEL_0. Indicates the national political entity, and is typically the highest order type returned by the Geocoder.\n <\/code><\/li>",
        "links": [],
        "examples": []
      },
      "members": [],
      "enum":       [
        "UNKNOWN_SUBDIVISION_TYPE",
        "ADMINISTRATIVE_AREA_LEVEL_1",
        "ADMINISTRATIVE_AREA_LEVEL_2",
        "ADMINISTRATIVE_AREA_LEVEL_3",
        "ADMINISTRATIVE_AREA_LEVEL_4",
        "ADMINISTRATIVE_AREA_LEVEL_5",
        "COUNTRY"
      ],
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_EventStatus",
      "displayName": "Event Status Object",
      "locations": [],
      "docs":       {
        "summary": " \n Possible values are: <li><code> SCHEDULED -  Event is public and scheduled to start\n <\/code><\/li><li><code> STARTED -  Event has started\n <\/code><\/li><li><code> ENDED -  Event has ended\n <\/code><\/li><li><code> CANCELED -  Event was canceled\n <\/code><\/li><li><code> DRAFT -  Event is not public and needs to be published\n <\/code><\/li>",
        "links": [],
        "examples": []
      },
      "members": [],
      "enum":       [
        "SCHEDULED",
        "STARTED",
        "ENDED",
        "CANCELED",
        "DRAFT"
      ],
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_Location_LocationType",
      "displayName": "Location Type Object",
      "locations": [],
      "docs":       {
        "summary": " \n Possible values are: <li><code> VENUE <\/code><\/li><li><code> ONLINE <\/code><\/li>",
        "links": [],
        "examples": []
      },
      "members": [],
      "enum":       [
        "VENUE",
        "ONLINE"
      ],
      "extra": {},
      "labels": []
    },
        {
      "name": "_wix_events_RecurrenceStatus_Status",
      "displayName": "Status Object",
      "locations": [],
      "docs":       {
        "summary": " \n Possible values are: <li><code> ONE_TIME -  Event occurs only once.\n <\/code><\/li><li><code> RECURRING -  Event is recurring.\n <\/code><\/li><li><code> RECURRING_NEXT -  Marks the next upcoming occurrence of the recurring event.\n <\/code><\/li><li><code> RECURRING_LAST_ENDED -  Marks the most recent ended occurrence of the recurring event.\n <\/code><\/li><li><code> RECURRING_LAST_CANCELED -  Marks the most recent canceled occurrence of the recurring event.\n <\/code><\/li>",
        "links": [],
        "examples": []
      },
      "members": [],
      "enum":       [
        "ONE_TIME",
        "RECURRING",
        "RECURRING_NEXT",
        "RECURRING_LAST_ENDED",
        "RECURRING_LAST_CANCELED"
      ],
      "extra": {},
      "labels": []
    }
  ],
  "extra": {"artifactId": "com.wixpress.events.events-policies"}
}